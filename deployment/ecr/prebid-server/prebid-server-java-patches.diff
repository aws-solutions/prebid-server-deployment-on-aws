diff --git a/sample/prebid-config.yaml b/sample/prebid-config.yaml
index dc5921bc4..ad5c59406 100644
--- a/sample/prebid-config.yaml
+++ b/sample/prebid-config.yaml
@@ -10,8 +10,13 @@ adapters:
     enabled: true
   rubicon:
     enabled: true
+  amt:
+    enabled: ${AMT_ADAPTER_ENABLED}
 metrics:
-  prefix: prebid
+  log:
+    enabled: true
+    name: METRICS
+    interval: 30
 cache:
   scheme: http
   host: localhost
diff --git a/src/main/java/org/prebid/server/bidder/amt/AmtBidder.java b/src/main/java/org/prebid/server/bidder/amt/AmtBidder.java
new file mode 100644
index 000000000..31a02208c
--- /dev/null
+++ b/src/main/java/org/prebid/server/bidder/amt/AmtBidder.java
@@ -0,0 +1,180 @@
+package org.prebid.server.bidder.amt;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.iab.openrtb.request.BidRequest;
+import com.iab.openrtb.request.Imp;
+import com.iab.openrtb.response.Bid;
+import com.iab.openrtb.response.BidResponse;
+import com.iab.openrtb.response.SeatBid;
+import org.apache.commons.collections4.CollectionUtils;
+import org.prebid.server.bidder.Bidder;
+import org.prebid.server.bidder.model.BidderBid;
+import org.prebid.server.bidder.model.BidderCall;
+import org.prebid.server.bidder.model.BidderError;
+import org.prebid.server.bidder.model.HttpRequest;
+import org.prebid.server.bidder.model.Price;
+import org.prebid.server.bidder.model.Result;
+import org.prebid.server.exception.PreBidException;
+import org.prebid.server.json.DecodeException;
+import org.prebid.server.json.JacksonMapper;
+import org.prebid.server.proto.openrtb.ext.ExtPrebid;
+import org.prebid.server.proto.openrtb.ext.request.amt.ExtImpAmt;
+import org.prebid.server.proto.openrtb.ext.response.BidType;
+import org.prebid.server.util.BidderUtil;
+import org.prebid.server.util.HttpUtil;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
+
+public class AmtBidder implements Bidder<BidRequest> {
+
+    private static final TypeReference<ExtPrebid<?, ExtImpAmt>> AMT_EXT_TYPE_REFERENCE = new TypeReference<>() {
+    };
+
+    private final String endpointUrl;
+    private final JacksonMapper mapper;
+
+    public AmtBidder(String endpointUrl, JacksonMapper mapper) {
+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));
+        this.mapper = Objects.requireNonNull(mapper);
+    }
+
+    @Override
+    public final Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {
+        final List<BidderError> errors = new ArrayList<>();
+        final List<Imp> validImps = new ArrayList<>();
+
+        for (Imp imp : bidRequest.getImp()) {
+            try {
+                final ExtImpAmt extImp = parseImpExt(imp);
+                final Imp updatedImp = processImp(imp, extImp);
+                validImps.add(updatedImp);
+            } catch (PreBidException e) {
+                errors.add(BidderError.badInput(e.getMessage()));
+            }
+        }
+
+        if (validImps.isEmpty()) {
+            errors.add(BidderError.badInput("No valid impressions for AMT"));
+            return Result.withErrors(errors);
+        }
+
+        final BidRequest outgoingBidRequest = bidRequest.toBuilder().imp(validImps).build();
+
+        return Result.of(
+                Collections.singletonList(BidderUtil.defaultRequest(outgoingBidRequest, endpointUrl, mapper)),
+                errors);
+    }
+
+    private ExtImpAmt parseImpExt(Imp imp) {
+        final ExtImpAmt extImpAmt;
+        try {
+            extImpAmt = mapper.mapper().convertValue(imp.getExt(), AMT_EXT_TYPE_REFERENCE).getBidder();
+        } catch (IllegalArgumentException e) {
+            throw new PreBidException("Wrong AMT bidder ext in imp: " + imp.getId(), e);
+        }
+
+        return extImpAmt;
+    }
+
+    private Imp processImp(Imp imp, ExtImpAmt extImpAmt) {
+        return imp.toBuilder()
+                .bidfloor(resolveBidFloor(imp, extImpAmt))
+                .ext(makeImpExt(extImpAmt))
+                .build();
+    }
+
+    private ObjectNode makeImpExt(ExtImpAmt extImpAmt) {
+        validateBidCeiling(extImpAmt);
+        final ExtImpAmt processedExtBuilder = ExtImpAmt.of(extImpAmt.getPlacementId(), extImpAmt.getBidFloor(),
+                extImpAmt.getBidCeiling());
+        return mapper.mapper().valueToTree(ExtPrebid.of(null, processedExtBuilder));
+    }
+
+    @Override
+    public final Result<List<BidderBid>> makeBids(BidderCall<BidRequest> httpCall, BidRequest bidRequest) {
+        try {
+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);
+            return Result.withValues(extractBids(httpCall.getRequest().getPayload(), bidResponse));
+        } catch (DecodeException e) {
+            return Result.withError(BidderError.badServerResponse(e.getMessage()));
+        }
+    }
+
+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {
+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {
+            return Collections.emptyList();
+        }
+        return bidsFromResponse(bidRequest, bidResponse);
+    }
+
+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {
+        return bidResponse.getSeatbid().stream()
+                .filter(Objects::nonNull)
+                .map(SeatBid::getBid)
+                .filter(Objects::nonNull)
+                .flatMap(Collection::stream)
+                .filter(bid -> isInBidPriceRange(bid, bidRequest.getImp()))
+                .map(bid -> BidderBid.of(bid, getBidType(bid, bidRequest.getImp()), bidResponse.getCur()))
+                .toList();
+    }
+
+    private boolean isInBidPriceRange(Bid bid, List<Imp> imps) {
+        for (Imp imp : imps) {
+            if (imp.getId().equals(bid.getImpid())) {
+                final ExtImpAmt extImp = parseImpExt(imp);
+                final BigDecimal bidPrice = bid.getPrice();
+                return compareBidPrice(bidPrice, imp.getBidfloor(), extImp.getBidCeiling());
+            }
+        }
+        return false;
+    }
+
+    private boolean compareBidPrice(BigDecimal bidPrice, BigDecimal bidFloor, BigDecimal bidCeiling) {
+        if (bidFloor != null && bidCeiling != null) {
+            return bidPrice.compareTo(bidFloor) >= 0 && bidPrice.compareTo(bidCeiling) <= 0;
+        } else if (bidFloor != null) {
+            return bidPrice.compareTo(bidFloor) >= 0;
+        } else if (bidCeiling != null) {
+            return bidPrice.compareTo(bidCeiling) <= 0;
+        }
+
+        return true;
+    }
+
+    private static BidType getBidType(Bid bid, List<Imp> imps) {
+        for (Imp imp : imps) {
+            if (imp.getId().equals(bid.getImpid())) {
+                if (imp.getBanner() != null) {
+                    return BidType.banner;
+                } else if (imp.getVideo() != null) {
+                    return BidType.video;
+                } else if (imp.getXNative() != null) {
+                    return BidType.xNative;
+                } else if (imp.getAudio() != null) {
+                    return BidType.audio;
+                }
+            }
+        }
+        return BidType.banner;
+    }
+
+    private static void validateBidCeiling(ExtImpAmt extImpAmt) {
+        final BigDecimal bidFloor = extImpAmt.getBidFloor();
+        final BigDecimal bidCeiling = extImpAmt.getBidCeiling();
+        if (BidderUtil.isValidPrice(bidFloor)
+                && BidderUtil.isValidPrice(bidCeiling) && bidFloor.compareTo(bidCeiling) >= 0) {
+            throw new PreBidException("Bid ceiling should be greater than bid floor in bidRequest.imp.ext for Amt");
+        }
+    }
+
+    private static BigDecimal resolveBidFloor(Imp imp, ExtImpAmt extImpAmt) {
+        final Price bidFloorPrice = Price.of(imp.getBidfloorcur(), imp.getBidfloor());
+        return BidderUtil.isValidPrice(bidFloorPrice) ? bidFloorPrice.getValue() : extImpAmt.getBidFloor();
+    }
+}
diff --git a/src/main/java/org/prebid/server/proto/openrtb/ext/request/amt/ExtImpAmt.java b/src/main/java/org/prebid/server/proto/openrtb/ext/request/amt/ExtImpAmt.java
new file mode 100644
index 000000000..3d6732870
--- /dev/null
+++ b/src/main/java/org/prebid/server/proto/openrtb/ext/request/amt/ExtImpAmt.java
@@ -0,0 +1,24 @@
+package org.prebid.server.proto.openrtb.ext.request.amt;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Value;
+
+import java.math.BigDecimal;
+
+@AllArgsConstructor(staticName = "of")
+@Value
+@Builder(toBuilder = true)
+public class ExtImpAmt {
+
+    @JsonProperty("placementId")
+    String placementId;
+
+    @JsonProperty("bidFloor")
+    BigDecimal bidFloor;
+
+    @JsonProperty("bidCeiling")
+    BigDecimal bidCeiling;
+
+}
diff --git a/src/main/java/org/prebid/server/spring/config/bidder/AmtConfiguration.java b/src/main/java/org/prebid/server/spring/config/bidder/AmtConfiguration.java
new file mode 100644
index 000000000..4b3193a16
--- /dev/null
+++ b/src/main/java/org/prebid/server/spring/config/bidder/AmtConfiguration.java
@@ -0,0 +1,41 @@
+package org.prebid.server.spring.config.bidder;
+
+import org.prebid.server.bidder.BidderDeps;
+import org.prebid.server.bidder.amt.AmtBidder;
+import org.prebid.server.json.JacksonMapper;
+import org.prebid.server.spring.config.bidder.model.BidderConfigurationProperties;
+import org.prebid.server.spring.config.bidder.util.BidderDepsAssembler;
+import org.prebid.server.spring.config.bidder.util.UsersyncerCreator;
+import org.prebid.server.spring.env.YamlPropertySourceFactory;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.PropertySource;
+
+import javax.validation.constraints.NotBlank;
+
+@Configuration
+@PropertySource(value = "classpath:/bidder-config/amt.yaml", factory = YamlPropertySourceFactory.class)
+public class AmtConfiguration {
+
+    private static final String BIDDER_NAME = "amt";
+
+    @Bean("amtConfigurationProperties")
+    @ConfigurationProperties("adapters.amt")
+    BidderConfigurationProperties configurationProperties() {
+        return new BidderConfigurationProperties();
+    }
+
+    @Bean
+    BidderDeps amtBidderDeps(BidderConfigurationProperties amtConfigurationProperties,
+                             @NotBlank @Value("${external-url}") String externalUrl,
+                             JacksonMapper mapper) {
+        return BidderDepsAssembler.forBidder(BIDDER_NAME)
+                .withConfig(amtConfigurationProperties)
+                .usersyncerCreator(UsersyncerCreator.create(externalUrl))
+                .bidderCreator(config -> new AmtBidder(config.getEndpoint(), mapper)
+                )
+                .assemble();
+    }
+}
diff --git a/src/main/java/org/prebid/server/spring/config/metrics/MetricsConfiguration.java b/src/main/java/org/prebid/server/spring/config/metrics/MetricsConfiguration.java
index 999b80ef4..4b0e5dab8 100644
--- a/src/main/java/org/prebid/server/spring/config/metrics/MetricsConfiguration.java
+++ b/src/main/java/org/prebid/server/spring/config/metrics/MetricsConfiguration.java
@@ -1,5 +1,7 @@
 package org.prebid.server.spring.config.metrics;
 
+import org.slf4j.LoggerFactory;
+import com.codahale.metrics.Slf4jReporter;
 import com.codahale.metrics.ConsoleReporter;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;
@@ -101,6 +103,18 @@ public class MetricsConfiguration {
         return reporter;
     }
 
+    @Bean
+    @ConditionalOnProperty(prefix = "metrics.log", name = "enabled", havingValue = "true")
+    ScheduledReporter logReporter(MetricsLogProperties metricsLogProperties, MetricRegistry metricRegistry) {
+        final ScheduledReporter reporter = Slf4jReporter.forRegistry(metricRegistry)
+                .outputTo(LoggerFactory.getLogger(metricsLogProperties.getName()))
+                .convertRatesTo(TimeUnit.SECONDS)
+                .convertDurationsTo(TimeUnit.MILLISECONDS).build();
+        reporter.start(metricsLogProperties.getInterval(), TimeUnit.SECONDS);
+
+        return reporter;
+    }
+
     @Bean
     Metrics metrics(@Value("${metrics.metricType}") CounterType counterType, MetricRegistry metricRegistry,
                     AccountMetricsVerbosityResolver accountMetricsVerbosityResolver) {
@@ -199,6 +213,21 @@ public class MetricsConfiguration {
         private Integer interval;
     }
 
+    @Component
+    @ConfigurationProperties(prefix = "metrics.log")
+    @ConditionalOnProperty(prefix = "metrics.log", name = "enabled", havingValue = "true")
+    @Validated
+    @Data
+    @NoArgsConstructor
+    private static class MetricsLogProperties {
+
+        @NotNull
+        @Min(1)
+        private Integer interval;
+        @NotBlank
+        private String name;
+    }
+
     @Component
     @ConfigurationProperties(prefix = "metrics.accounts")
     @Validated
diff --git a/src/main/resources/bidder-config/amt.yaml b/src/main/resources/bidder-config/amt.yaml
new file mode 100644
index 000000000..c1aad36de
--- /dev/null
+++ b/src/main/resources/bidder-config/amt.yaml
@@ -0,0 +1,17 @@
+adapters:
+  amt:
+    endpoint: ${AMT_BIDDING_SERVER_SIMULATOR_ENDPOINT}
+    meta-info:
+      maintainer-email: maintainer@example.com
+      app-media-types:
+        - banner
+        - video
+        - native
+        - audio
+      site-media-types:
+        - banner
+        - video
+        - native
+        - audio
+      supported-vendors:
+      vendor-id: 0
diff --git a/src/main/resources/static/bidder-params/amt.json b/src/main/resources/static/bidder-params/amt.json
new file mode 100644
index 000000000..b3854be3d
--- /dev/null
+++ b/src/main/resources/static/bidder-params/amt.json
@@ -0,0 +1,26 @@
+{
+  "$schema": "http://json-schema.org/draft-04/schema#",
+  "title": "AWS AMT Solutions Adapter Params",
+  "description": "A schema which validates params accepted by the AWS AMT Solutions adapter",
+  "type": "object",
+  "properties": {
+    "placementId": {
+      "type": "string",
+      "description": "Placement ID",
+      "minLength": 1
+    },
+    "bidFloor": {
+      "type": "number",
+      "description": "The minimum CPM price in USD.",
+      "minimum": 0
+    },
+    "bidCeiling": {
+      "type": "number",
+      "description": "The maximum CPM price in USD.",
+      "maximum": 100000
+    }
+  },
+  "required": [
+    "placementId"
+  ]
+}
diff --git a/src/test/java/org/prebid/server/bidder/amt/AmtBidderTest.java b/src/test/java/org/prebid/server/bidder/amt/AmtBidderTest.java
new file mode 100644
index 000000000..9784f4b47
--- /dev/null
+++ b/src/test/java/org/prebid/server/bidder/amt/AmtBidderTest.java
@@ -0,0 +1,319 @@
+package org.prebid.server.bidder.amt;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.iab.openrtb.request.Audio;
+import com.iab.openrtb.request.Banner;
+import com.iab.openrtb.request.BidRequest;
+import com.iab.openrtb.request.Imp;
+import com.iab.openrtb.request.Native;
+import com.iab.openrtb.request.Video;
+import com.iab.openrtb.response.Bid;
+import com.iab.openrtb.response.BidResponse;
+import com.iab.openrtb.response.SeatBid;
+import org.junit.Test;
+import org.prebid.server.VertxTest;
+import org.prebid.server.bidder.model.BidderBid;
+import org.prebid.server.bidder.model.BidderCall;
+import org.prebid.server.bidder.model.BidderError;
+import org.prebid.server.bidder.model.HttpRequest;
+import org.prebid.server.bidder.model.HttpResponse;
+import org.prebid.server.bidder.model.Result;
+import org.prebid.server.proto.openrtb.ext.ExtPrebid;
+import org.prebid.server.proto.openrtb.ext.request.amt.ExtImpAmt;
+
+import java.math.BigDecimal;
+import java.util.List;
+import java.util.function.Function;
+import java.util.function.UnaryOperator;
+
+import static java.util.Collections.singletonList;
+import static java.util.function.UnaryOperator.identity;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
+import static org.prebid.server.proto.openrtb.ext.response.BidType.audio;
+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;
+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;
+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;
+
+public class AmtBidderTest extends VertxTest {
+
+    public static final String ENDPOINT_URL = "https://test.endpoint.com";
+
+    private final AmtBidder target = new AmtBidder(ENDPOINT_URL, jacksonMapper);
+
+    @Test
+    public void creationShouldFailOnInvalidEndpointUrl() {
+        assertThatIllegalArgumentException().isThrownBy(() -> new AmtBidder("invalid_url", jacksonMapper));
+    }
+
+    @Test
+    public void makeHttpRequestsShouldCreateExpectedUrl() {
+        // given
+        final BidRequest bidRequest = givenBidRequest(identity());
+
+        // when
+        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue()).hasSize(1)
+                .extracting(HttpRequest::getUri)
+                .containsExactly("https://test.endpoint.com");
+    }
+
+    @Test
+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(null, "invalid");
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).hasSize(1)
+                .allSatisfy(error -> {
+                    assertThat(error.getType()).isEqualTo(BidderError.Type.bad_server_response);
+                    assertThat(error.getMessage()).startsWith("Failed to decode: Unrecognized token");
+                });
+        assertThat(result.getValue()).isEmpty();
+    }
+
+    @Test
+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(null, mapper.writeValueAsString(null));
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue()).isEmpty();
+    }
+
+    @Test
+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(null,
+                mapper.writeValueAsString(BidResponse.builder().build()));
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue()).isEmpty();
+    }
+
+    @Test
+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(
+                givenBidRequest(impBuilder -> impBuilder.banner(Banner.builder().build())),
+                mapper.writeValueAsString(
+                        givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(10)))
+                )
+        );
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .containsExactly(BidderBid.of(givenBid(), banner, null));
+    }
+
+    @Test
+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(
+                givenBidRequest(impBuilder -> impBuilder.video(Video.builder().build())),
+                mapper.writeValueAsString(
+                        givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(10)))));
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .containsExactly(BidderBid.of(givenBid(), video, null));
+    }
+
+    @Test
+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(
+                givenBidRequest(impBuilder -> impBuilder.xNative(Native.builder().build())),
+                mapper.writeValueAsString(
+                        givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(10)))));
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .containsExactly(BidderBid.of(givenBid(), xNative, null));
+    }
+
+    @Test
+    public void makeBidsShouldReturnAudioBidIfAudioIsPresentInRequestImp() throws JsonProcessingException {
+        // given
+        final BidRequest bidRequest = givenBidRequest(impBuilder -> impBuilder.audio(Audio.builder().build()));
+        final String bidResponse = mapper.writeValueAsString(
+                givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(10))));
+        final BidderCall<BidRequest> httpCall = givenHttpCall(bidRequest, bidResponse);
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .containsExactly(BidderBid.of(givenBid(), audio, null));
+    }
+
+    @Test
+    public void makeBidsShouldReturnBannerBidIfBannerAndVideoAndAudioAndNativeIsAbsentInRequestImp()
+            throws JsonProcessingException {
+        // given
+        final BidderCall<BidRequest> httpCall = givenHttpCall(
+                givenBidRequest(identity()),
+                mapper.writeValueAsString(
+                        givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(10)))));
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .containsExactly(BidderBid.of(givenBid(), banner, null));
+    }
+
+    @Test
+    public void makeHttpRequestsShouldSetPriceFloorAndPriceCeilingInExtToNullIfNotPresent() {
+        // given
+        final BidRequest bidRequest = givenBidRequest(identity(), null, null);
+
+        // when
+        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue()).hasSize(1)
+                .extracting(httpRequest -> httpRequest.getPayload().getImp().get(0).getBidfloor())
+                .containsNull();
+        assertThat(result.getValue()).hasSize(1)
+                .extracting(httpRequest -> httpRequest.getPayload().getImp().get(0).getExt().get("bidFloor"))
+                .containsOnlyNulls();
+
+        assertThat(result.getValue()).hasSize(1)
+                .extracting(httpRequest -> httpRequest.getPayload().getImp().get(0).getExt().get("bidCeiling"))
+                .containsOnlyNulls();
+    }
+
+    @Test
+    public void makeBidsShouldRemoveBidsIfPriceIsNotInBidFloorAndBidCeilingRange() throws JsonProcessingException {
+        // given
+        final BidRequest bidRequest = givenBidRequest(impBuilder -> impBuilder.audio(Audio.builder().build()));
+        final String bidResponse = mapper.writeValueAsString(
+                givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(200000))));
+        final BidderCall<BidRequest> httpCall = givenHttpCall(bidRequest, bidResponse);
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, null);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue()).isEmpty();
+    }
+
+    @Test
+    public void makeBidsShouldReturnBidsIfBidFloorNotPresent() throws JsonProcessingException {
+        // given
+        final BidRequest bidRequest = givenBidRequest(identity(), null, BigDecimal.valueOf(10000));
+        final String bidResponse = mapper.writeValueAsString(
+                givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(100))));
+        final BidderCall<BidRequest> httpCall = givenHttpCall(bidRequest, bidResponse);
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, bidRequest);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .extracting(BidderBid::getBid)
+                .contains(Bid.builder().impid("123").price(BigDecimal.valueOf(100)).build());
+    }
+
+    @Test
+    public void makeBidsShouldReturnBidsIfBidCeilingNotPresent() throws JsonProcessingException {
+        // given
+        final BidRequest bidRequest = givenBidRequest(identity(), BigDecimal.ONE, null);
+        final String bidResponse = mapper.writeValueAsString(
+                givenBidResponse(impBuilder -> impBuilder.impid("123").price(BigDecimal.valueOf(100))));
+        final BidderCall<BidRequest> httpCall = givenHttpCall(bidRequest, bidResponse);
+
+        // when
+        final Result<List<BidderBid>> result = target.makeBids(httpCall, bidRequest);
+
+        // then
+        assertThat(result.getErrors()).isEmpty();
+        assertThat(result.getValue())
+                .extracting(BidderBid::getBid)
+                .contains(Bid.builder().impid("123").price(BigDecimal.valueOf(100)).build());
+    }
+
+    private static BidRequest givenBidRequest(UnaryOperator<Imp.ImpBuilder> impCustomizer) {
+        return givenBidRequest(identity(), impCustomizer);
+    }
+
+    private static BidRequest givenBidRequest(
+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,
+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {
+
+        final ExtImpAmt extBuilder = ExtImpAmt.of("123", BigDecimal.ZERO, BigDecimal.valueOf(100000));
+        final ObjectNode impExt = jacksonMapper.mapper().valueToTree(ExtPrebid.of(null, extBuilder));
+        final Imp imp = impCustomizer.apply(Imp.builder().id("123").bidfloor(BigDecimal.ZERO).ext(impExt)).build();
+
+        return bidRequestCustomizer.apply(BidRequest.builder().imp(singletonList(imp))).build();
+    }
+
+    private static BidRequest givenBidRequest(
+            UnaryOperator<Imp.ImpBuilder> impCustomizer, BigDecimal bidFloor, BigDecimal bidCeiling) {
+        return givenBidRequest(identity(), impCustomizer, bidFloor, bidCeiling);
+    }
+
+    private static BidRequest givenBidRequest(
+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,
+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer, BigDecimal bidFloor, BigDecimal bidCeiling) {
+
+        final ExtImpAmt extBuilder = ExtImpAmt.of("123", bidFloor, bidCeiling);
+        final ObjectNode impExt = jacksonMapper.mapper().valueToTree(ExtPrebid.of(null, extBuilder));
+        final Imp imp = impCustomizer.apply(Imp.builder().id("123").bidfloor(bidFloor).ext(impExt)).build();
+
+        return bidRequestCustomizer.apply(BidRequest.builder().imp(singletonList(imp))).build();
+    }
+
+    private static BidResponse givenBidResponse(Function<Bid.BidBuilder, Bid.BidBuilder> bidCustomizer) {
+        return BidResponse.builder()
+                .seatbid(singletonList(SeatBid.builder().bid(singletonList(bidCustomizer.apply(Bid.builder()).build()))
+                        .build()))
+                .build();
+    }
+
+    private static Bid givenBid() {
+        return Bid.builder().impid("123").price(BigDecimal.valueOf(10)).build();
+    }
+
+    private static BidderCall<BidRequest> givenHttpCall(BidRequest bidRequest, String body) {
+        return BidderCall.succeededHttp(
+                HttpRequest.<BidRequest>builder().payload(bidRequest).build(),
+                HttpResponse.of(200, null, body),
+                null);
+    }
+}
diff --git a/src/test/java/org/prebid/server/it/AmtTest.java b/src/test/java/org/prebid/server/it/AmtTest.java
new file mode 100644
index 000000000..240670f6c
--- /dev/null
+++ b/src/test/java/org/prebid/server/it/AmtTest.java
@@ -0,0 +1,39 @@
+package org.prebid.server.it;
+
+import io.restassured.response.Response;
+import org.json.JSONException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.prebid.server.model.Endpoint;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.io.IOException;
+
+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;
+import static com.github.tomakehurst.wiremock.client.WireMock.post;
+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;
+import static java.util.Collections.singletonList;
+
+@RunWith(SpringRunner.class)
+public class AmtTest extends IntegrationTest {
+
+    @Test
+    public void openrtb2AuctionShouldRespondWithBidsFromAmt() throws IOException, JSONException {
+
+        // given
+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo("/amt-exchange"))
+                .withRequestBody(equalToJson(
+                        jsonFrom("openrtb2/amt/test-amt-bid-request.json")))
+                .willReturn(aResponse().withBody(
+                        jsonFrom("openrtb2/amt/test-amt-bid-response.json"))));
+
+        // when
+        final Response response = responseFor("openrtb2/amt/test-auction-amt-request.json",
+                Endpoint.openrtb2_auction);
+
+        // then
+        assertJsonEquals("openrtb2/amt/test-auction-amt-response.json", response,
+                singletonList("amt"));
+    }
+}
diff --git a/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-request.json b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-request.json
new file mode 100644
index 000000000..a9b082f00
--- /dev/null
+++ b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-request.json
@@ -0,0 +1,58 @@
+{
+  "id": "request_id",
+  "imp": [
+    {
+      "id": "imp_id",
+      "secure": 1,
+      "bidfloor" : 1,
+      "banner": {
+        "w": 300,
+        "h": 250
+      },
+      "ext": {
+        "bidder": {
+          "placementId": "placementId",
+          "bidFloor": 1,
+          "bidCeiling": 50
+        }
+      }
+    }
+  ],
+  "source": {
+    "tid": "${json-unit.any-string}"
+  },
+  "site": {
+    "domain": "www.example.com",
+    "page": "http://www.example.com",
+    "publisher": {
+      "domain": "example.com"
+    },
+    "ext": {
+      "amp": 0
+    }
+  },
+  "device": {
+    "ua": "userAgent",
+    "ip": "193.168.244.1"
+  },
+  "at": 1,
+  "tmax": "${json-unit.any-number}",
+  "cur": [
+    "USD"
+  ],
+  "regs": {
+    "ext": {
+      "gdpr": 0
+    }
+  },
+  "ext": {
+    "prebid": {
+      "server": {
+        "externalurl": "http://localhost:8080",
+        "gvlid": 1,
+        "datacenter": "local",
+        "endpoint": "/openrtb2/auction"
+      }
+    }
+  }
+}
diff --git a/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-response.json b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-response.json
new file mode 100644
index 000000000..04d26e043
--- /dev/null
+++ b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-amt-bid-response.json
@@ -0,0 +1,15 @@
+{
+  "id": "request_id",
+  "seatbid": [
+    {
+      "bid": [
+        {
+          "id": "bid_id",
+          "impid": "imp_id",
+          "price": 3.33,
+          "crid": "creativeId"
+        }
+      ]
+    }
+  ]
+}
diff --git a/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-request.json b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-request.json
new file mode 100644
index 000000000..4d36939d5
--- /dev/null
+++ b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-request.json
@@ -0,0 +1,25 @@
+{
+  "id": "request_id",
+  "imp": [
+    {
+      "id": "imp_id",
+      "banner": {
+        "w": 300,
+        "h": 250
+      },
+      "ext": {
+        "amt": {
+          "placementId": "placementId",
+          "bidFloor": 1,
+          "bidCeiling": 50
+        }
+      }
+    }
+  ],
+  "tmax": 5000,
+  "regs": {
+    "ext": {
+      "gdpr": 0
+    }
+  }
+}
diff --git a/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-response.json b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-response.json
new file mode 100644
index 000000000..8d232c256
--- /dev/null
+++ b/src/test/resources/org/prebid/server/it/openrtb2/amt/test-auction-amt-response.json
@@ -0,0 +1,33 @@
+{
+  "id": "request_id",
+  "seatbid": [
+    {
+      "bid": [
+        {
+          "id": "bid_id",
+          "impid": "imp_id",
+          "price": 3.33,
+          "crid": "creativeId",
+          "ext": {
+            "origbidcpm": 3.33,
+            "prebid": {
+              "type": "banner"
+            }
+          }
+        }
+      ],
+      "seat": "amt",
+      "group": 0
+    }
+  ],
+  "cur": "USD",
+  "ext": {
+    "responsetimemillis": {
+      "amt": "{{ amt.response_time_ms }}"
+    },
+    "prebid": {
+      "auctiontimestamp": 0
+    },
+    "tmaxrequest": 5000
+  }
+}
diff --git a/src/test/resources/org/prebid/server/it/test-application.properties b/src/test/resources/org/prebid/server/it/test-application.properties
index 1f0a9689e..dc75dc7b2 100644
--- a/src/test/resources/org/prebid/server/it/test-application.properties
+++ b/src/test/resources/org/prebid/server/it/test-application.properties
@@ -445,6 +445,8 @@ adapters.aax.enabled=true
 adapters.aax.endpoint=http://localhost:8090/aax-exchange
 adapters.zeta_global_ssp.enabled=true
 adapters.zeta_global_ssp.endpoint=http://localhost:8090/zeta_global_ssp-exchange
+adapters.amt.enabled=true
+adapters.amt.endpoint=http://localhost:8090/amt-exchange
 adapters.yearxero.enabled=true
 adapters.yearxero.endpoint=http://localhost:8090/yearxero-exchange
 adapters.minutemedia.enabled=true
